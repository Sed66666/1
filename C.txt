#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<time.h>
#include<math.h>
#include<Windows.h>

struct document   //定义结构数组
{
	char name[20];   //姓名
	int cardID;      //卡号
	int key;         //密码
	double balance;  //账户余额
	char ID[20];     //身份证号
	char telephone[20];  //电话号码
	int keychance;       //密码可尝试次数
	int resetchance;     //重置可尝试次数
};

void login(struct document * p, FILE * f, int m);              //登录函数
void reg(struct document * p, FILE * f, int m);                //开户函数
void deposit(struct document * p, FILE * f, int a);            //存入函数
void draw(struct document * p, FILE * f, int a);               //取出函数
void balance(struct document * p, int a);                      //余额函数
void transfer(struct document * p, FILE * f, int a);           //转账函数
void changekey(struct document * p, FILE * f, int a);          //修改密码函数
void menu(struct document * p, FILE * f, int a);               //主界面函数
void reset(struct document * p, FILE * f, int m, int a);       //重置密码函数
char judge(char * b);                                          //身份证号合法性判断函数
void delay();                                                  //延迟函数

//p为文件指针，a为登录账户所在行数，m为第一空账户所在行数

int main()
{
	int i, m;
	struct document doc[10] = { 0 };   //初始化结构数组
	FILE * f;    //定义文件指针
	f = fopen("deta", "a+");     //打开文件，返回文件位置

	for (i = 0; i < 10; i++)      //读文件
	{
		fscanf(f, "%s", &doc[i].name);         //读取姓名
		fscanf(f, "%d", &doc[i].cardID);       //读取卡号
		fscanf(f, "%d", &doc[i].key);          //读取密码
		fscanf(f, "%lf", &doc[i].balance);     //读取余额
		fscanf(f, "%s", &doc[i].ID);           //读取ID
		fscanf(f, "%s", &doc[i].telephone);    //读取电话号码
		fscanf(f, "%d", &doc[i].keychance);    //读取密码剩余可尝试次数
		fscanf(f, "%d", &doc[i].resetchance);  //读取密码剩余可尝试次数
		if (doc[i].cardID == 0)
		{
			m = i;           //获取结构数组第一空行序号，m
			break;
		}
	}
	fclose(f);  //关闭文件
	struct document * p;         //定义指向结构数组的指针
	p = &doc[0];
	printf("\n------------------欢迎使用ATM自动存取一体机--------------\n\n 请注意：在正常退出后数据才会被保存！\n\n");
	login(p, f, m);
}

void login(struct document * p, FILE * f, int m)   //登录
{
	int i, k, cardID;
	printf("\n 请输入账号，如需开户请输入 1 ，退出请输入 0 \n\n ");
	scanf("%d", &cardID);
	if (cardID == 1)    //输入1跳转至开户
	{
		system("cls");
		reg(p, f, m);
	}
	if (cardID == 0)    //输入0保存退出程序
	{
		int ii;
		f = fopen("deta", "w");     //将文件打开并清空
		for (ii = 0; ii < 10; ii++)
		{
			if ((*(p + ii)).cardID == 0)
				break;
			fprintf(f, "%s ", (*(p + ii)).name);     //保存数据
			fprintf(f, "%d ", (*(p + ii)).cardID);
			fprintf(f, "%d ", (*(p + ii)).key);
			fprintf(f, "%f ", (*(p + ii)).balance);
			fprintf(f, "%s ", (*(p + ii)).ID);
			fprintf(f, "%s ", (*(p + ii)).telephone);
			fprintf(f, "%d ", (*(p + ii)).keychance);
			fprintf(f, "%d\n", (*(p + ii)).resetchance);
		}
		fclose(f);
		system("cls");
		delay();
		printf("\n 退出成功\n");
		exit(0);
	}
	for (i = 0; i < 10; i++)  //在数组中寻找账号
	{
		int  temp;
		if (cardID == (*(p + i)).cardID)   //如果找到,验证密码，登录账户的结构数组序号为i
		{
			system("cls");
			for (k = 0; k < 100; k++)     //循环用于输入错误时重复输入密码
			{
				if ((*(p + i)).resetchance == 0)       //如果重置次数超限无法登录
				{
					printf("\n 由于重置次数过多，该账户已被锁定，如需解锁请联系管理员\n");
					login(p, f, m);
				}
				if ((*(p + i)).keychance == 0)         //如果密码输入错误次数超限无法登录
				{
					printf("\n 由于密码输入错误次数过多，该账户已被锁定，如需解锁请联系管理员\n");
					login(p, f, m);
				}
				if ((*(p + i)).keychance == 5)         //如果密码未曾输入错误
					printf("\n 请输入密码，如需返回请输入 0 ，忘记密码请输入 1 \n\n ");
				else  //如果密码可尝试次数小于5
				{
					printf("\n 请输入密码，您还有 %d 次机会，返回登录页请输入 0 ，忘记密码请输入 1 \n\n ", (*(p + i)).keychance);
				}
				scanf("%d", &temp);
				if (temp == 0)    //返回重新输入账号
				{
					system("cls");
					login(p, f, m);
				}
				if (temp == 1)   //跳转至密码重置
				{
					system("cls");
					reset(p, f, m, i);
				}
				if (temp == (*(p + i)).key)    //如果密码输入正确，进入目录
				{
					(*(p + i)).keychance = 5;     //登录成功重置该账户密码可尝试次数
					system("cls");
					delay();
					printf("\n 登录成功！\n");
					menu(p, f, i);
				}
				else   //如果密码错误，报错，可尝试次数减1
				{
					system("cls");
					delay();
					(*(p + i)).keychance -= 1;
					printf("\n 密码错误\n");
				}
			}
		}
	}
	system("cls");
	printf("\n 账号错误或不存在，请重试\n");   //如果未找到账号，循环登录
	login(p, f, m);
}

void reg(struct document * p, FILE * f, int m)   //开户
{
	int i, x, y;
	printf("\n 请输入您的姓名\n\n ");
	scanf("%s", &(*(p + m)).name);
	system("cls");
	for (i = 1; i < 100; i++)    //获取手机号
	{
		char temp[20];       //初始化temp，用于存放字符型手机号
		printf("\n 请输入您的11位手机号\n\n ");
		scanf("%s", &temp);
		if (strlen(temp) != 11 || temp[0] != 49)      //判断手机号是否合法（第一位是否为1，长度是否为11位）
		{
			system("cls");
			printf("\n 手机号非法，请重新输入\n");
		}
		else        //如果合法存入数组
		{
			system("cls");
			for (x = 0; x < 18; x++)
				*((*(p + m)).telephone + x) = *(temp + x);
			break;
		}
	}
	for (i = 1; i < 100; i++)    //获取身份证号
	{
		char temp[20];       //初始化temp
		printf("\n 请输入您的18位身份证号，如果有X请大写，返回登录页请输入 0 \n\n ");
		scanf("%s", &temp);
		if (temp[0] == '0')   //输入0跳转至登录
		{
			system("cls");
			login(p, f, m);
		}
		if (strlen(temp) != 18 || temp[17] != judge(temp))      //判断身份证号是否合法（长度是否为18位，最后一位校验码是否正确）
		{
			system("cls");
			printf("\n 身份证号非法，请重新输入\n");
		}
		else
		{
			for (x = 0; x < 10; x++)    //比较数组中的身份证号
			{
				for (y = 0; y < 18; y++)   //比较身份证号的每位数字
				{
					if (*(temp + y) == *((*(p + x)).ID + y));
					else break;
				}
				if (y == 18)  //如果身份证号与数组中某个相同
				{
					system("cls");
					printf("\n 该身份证已注册过账号，请直接登录\n");
					break;
				}
			}
			if (x == 10)  //如果所有身份证号全部比较完成
			{
				for (x = 0; x < 18; x++)
					*((*(p + m)).ID + x) = *(temp + x);
				system("cls");
				break;
			}
		}
	}
	for (i = 1; i < 100; i++)  //设置密码
	{
		char temp[7], compare[7];    //初始化temp，compare
		printf("\n 请设置您的密码,限定为6位数字,且不要使用强度较弱的密码\n\n ");
		scanf("%s", &temp);
		if (strlen(temp) != 6 || (atoi(temp)) % 111111 == 0 || (atoi(temp)) == 123456)  //判断密码是否合法（长度是否为6位，是否过于简单）
		{
			system("cls");
			printf("\n 密码不符合要求，请重新输入\n");
		}
		else
		{
			system("cls");
			printf("\n 请再次输入您的密码\n\n ");
			scanf("%s", &compare);
			if ((atoi(compare)) != (atoi(temp)))    //如果两次输入不一致，重新输入
			{
				system("cls");
				printf("\n 两次输入的密码不一致\n");
			}
			else
			{
				system("cls");
				(*(p + m)).key = (atoi(temp));   //输入一致，将密码存入数组
				delay();
				printf("\n 开户成功！\n");
				srand((unsigned)time(NULL));     //根据系统时间随机生成卡号
				(*(p + m)).cardID = 1000 + rand() % 9000;
				(*(p + m)).keychance = 5;        //初始化该账号可重置、尝试次数
				(*(p + m)).resetchance = 2;
				printf("\n 您的卡号为 %d 请牢记！\n", (*(p + m)).cardID);
				break;
			}
		}
	}
	login(p, f, m + 1);
}

void menu(struct document * p, FILE * f, int a)  //主界面
{
	int q, i;
	for (q = 0; q < 100; q++)
	{
		system("cls");
		printf("\n %s 您好!\n\n 请输入需要办理业务的代号\n\n 1 存入       2 取出       3 查询余额\n\n 4 转账       5 修改密码\n\n 0 退出\n\n 请注意：在正常退出后数据才会被保存！\n\n ", (*(p + a)).name);
		scanf("%d", &i);
		switch (i)   //选择功能
		{
		case 0:   //输入0，保存退出
		{
			int ii;
			f = fopen("deta", "w");     //将文件打开并清空
			for (ii = 0; ii < 10; ii++)
			{
				if ((*(p + ii)).cardID == 0)
					break;
				fprintf(f, "%s ", (*(p + ii)).name);     //保存数据
				fprintf(f, "%d ", (*(p + ii)).cardID);
				fprintf(f, "%d ", (*(p + ii)).key);
				fprintf(f, "%f ", (*(p + ii)).balance);
				fprintf(f, "%s ", (*(p + ii)).ID);
				fprintf(f, "%s ", (*(p + ii)).telephone);
				fprintf(f, "%d ", (*(p + ii)).keychance);
				fprintf(f, "%d\n", (*(p + ii)).resetchance);
			}
			fclose(f);
			system("cls");
			delay();
			printf("\n 退出成功\n");
			exit(0);
		}
		case 1:deposit(p, f, a); break;
		case 2:draw(p, f, a); break;
		case 3:balance(p, a); break;
		case 4:system("cls"); transfer(p, f, a); break;
		case 5:system("cls"); changekey(p, f, a); break;
		}
	}
}

void deposit(struct document * p, FILE * f, int a)   //存款
{
	int i;
	double x;     //x为存款金额
	system("cls");
	for (i = 1; i < 100; i++)
	{
		printf("\n 请输入存款的金额，单次上限为2000，支持到小数点后第二位，返回请输入 0 \n\n ");
		scanf("%lf", &x);
		if (x == 0)
			menu(p, f, a);
		else
		{
			double temp, cash;
			temp = modf(100 * x, &cash);
			if (x < 0 || x > 2000 || temp != 0)
			{
				system("cls");
				printf("\n 输入金额非法，请重新输入\n");
			}
			else
			{
				(*(p + a)).balance += x;
				system("cls");
				delay();
				printf("\n 操作成功！\n\n");
				system("pause");
				break;
			}
		}
	}
}

void draw(struct document * p, FILE * f, int a)   //取款
{
	int i;
	double x;     //x为取款金额
	system("cls");
	for (i = 1; i < 100; i++)
	{
		printf("\n 请输入取款的金额，单次上限为2000，支持到小数点后第二位，返回请输入 0 \n\n ");
		scanf("%lf", &x);
		if (x == 0)
			menu(p, f, a);
		else
		{
			double temp, cash;
			temp = modf(100 * x, &cash);
			if (x < 0 || x > 2000 || temp != 0)
			{
				system("cls");
				printf("\n 输入金额非法，请重新输入\n");
			}
			else
			{
				if (x > (*(p + a)).balance)
				{
					system("cls");
					printf("\n 余额不足，请重新输入\n");
				}
				else
				{
					(*(p + a)).balance -= x;
					system("cls");
					delay();
					printf("\n 操作成功！\n\n");
					system("pause");
					break;
				}
			}
		}
	}
}

void balance(struct document * p, int a)  //查询余额
{
	system("cls");
	delay();
	printf("\n 您的账户余额为 %.2f 元\n\n", (*(p + a)).balance);
	system("pause");
}

void transfer(struct document * p, FILE * f, int a)  //转账
{
	int i, ii, cardID;
	double x;
	printf("\n 请输入需要转入的账号，返回请输入 0 \n\n ");
	scanf("%d", &cardID);
	if (cardID == 0)
		menu(p, f, a);
	else
	{
		for (i = 0; i < 10; i++)    //i为对方账户在数组内的行数
		{
			if (cardID == (*(p + i)).cardID)
			{
				system("cls");
				break;
			}
		}
		if (i == 10)
		{
			system("cls");
			printf("\n 账号不存在，请重试\n");
			transfer(p, f, a);
		}
		for (ii = 0; ii < 10; ii++)   //x为转账金额
		{
			system("cls");
			printf("\n 请输入转账金额，支持到小数点后第二位，返回主菜单请输入 0 \n\n ");
			scanf("%lf", &x);
			if (x == 0)
				menu(p, f, a);
			else
			{
				double temp, cash;
				temp = modf(100 * x, &cash);
				if (x < 0 || temp != 0)
				{
					system("cls");
					printf("\n 输入金额非法，请重新输入\n");
				}
				else
				{
					if (x > (*(p + a)).balance)
					{
						system("cls");
						printf("\n 余额不足，请重新输入\n");
					}
					else
					{
						(*(p + a)).balance -= x;
						(*(p + i)).balance += x;
						system("cls");
						delay();
						printf("\n 操作成功！\n\n");
						system("pause");
						menu(p, f, a);
					}
				}
			}
		}
	}
}

void changekey(struct document * p, FILE * f, int a)  //修改密码
{
	int i;
	for (i = 1; i < 100; i++)
	{
		char temp[20], compare[20];    //初始化temp，compare
		printf("\n 请设置您的新密码,限定为6位数字,且不要使用强度较弱的密码，返回请输入 0 \n\n ");
		scanf("%s", &temp);
		if ((atoi(temp)) == 0)
			menu(p, f, a);
		else
		{
			if (strlen(temp) != 6 || (atoi(temp)) % 111111 == 0 || (atoi(temp)) == 123456)      //判断密码是否合法
			{
				system("cls");
				printf("\n 密码不符合要求，请重新输入\n");
			}
			else
			{
				system("cls");
				printf("\n 请再次输入您的密码\n\n ");
				scanf("%s", &compare);
				if ((atoi(compare)) != (atoi(temp)))
				{
					system("cls");
					printf("\n 两次输入的密码不一致\n");
				}
				else      //将密码存入数组
				{
					(*(p + a)).key = (atoi(temp));
					system("cls");
					delay();
					printf("\n 密码修改成功！\n\n");
					system("pause");
					break;
				}
			}
		}
	}
}

void reset(struct document * p, FILE * f, int m, int a) //重置密码
{
	int x, y;
	char temp[20], temp2[20];
	if ((*(p + a)).resetchance == 0)   //判断重置次数是否超限
	{
		printf("\n 由于重置次数过多，该账户已被锁定，如需解锁请联系管理员\n");
		login(p, f, m);
	}
	else
	{
		printf("\n 请注意，只有账户未被锁定时才可以重置密码\n 当前剩余可尝试次数为 %d 次\n\n", (*(p + a)).resetchance);
		printf("\n 请输入您的18位身份证号，返回登录页请输入 0 \n\n ");
		scanf("%s", &temp);
		if (temp[0] == '0')
		{
			system("cls");
			login(p, f, m);
		}
		for (x = 0; x < 18; x++)   //比较身份证号的每位数字
		{
			if (*(temp + x) == *((*(p + a)).ID + x));
			else break;
		}
		if (x == 18)  //如果身份证号相同
		{
			system("cls");
			printf("\n 请输入您的手机号\n\n ");
			scanf("%s", &temp2);
			for (y = 0; y < 11; y++)   //比较手机号的每位数字
			{
				if (*(temp2 + y) == *((*(p + a)).telephone + y));
				else break;
			}
			if (y == 11)  //如果手机号相同，重置密码
			{
				system("cls");
				delay();
				(*(p + a)).key = 123456;
				(*(p + a)).resetchance = 2;
				printf("\n 您的账户密码已经重置为123456，请尽快登录修改！\n");
				login(p, f, m);
			}
			else  //如果手机号不同
			{
				system("cls");
				printf("\n 手机号输入错误\n");
				(*(p + a)).resetchance -= 1;
				reset(p, f, m, a);
			}
		}
		else //如果身份证号不同
		{
			system("cls");
			printf("\n 身份证号输入错误\n");
			(*(p + a)).resetchance -= 1;
			reset(p, f, m, a);
		}
	}
}

char judge(char * b)  //身份证号最后一位校验码合法性判断
{
	int ii, sum, z;
	char r;
	int c[18];
	for (ii = 0; ii < 17; ii++)  //将字符转化为数字
		c[ii] = *(b + ii) - 48;
	sum = 7 * c[0] + 9 * c[1] + 10 * c[2] + 5 * c[3] + 8 * c[4] + 4 * c[5] + 2 * c[6] + 1 * c[7] + 6 * c[8] + 3 * c[9] + 7 * c[10] + 9 * c[11] + 10 * c[12] + 5 * c[13] + 8 * c[14] + 4 * c[15] + 2 * c[16];
	z = sum % 11;
	switch (z)    //替换最后一位
	{
	case 0:r = '1'; break;
	case 1:r = '0'; break;
	case 2:r = 'X'; break;
	case 3:r = '9'; break;
	case 4:r = '8'; break;
	case 5:r = '7'; break;
	case 6:r = '6'; break;
	case 7:r = '5'; break;
	case 8:r = '4'; break;
	case 9:r = '3'; break;
	case 10:r = '2'; break;
	}
	return r;
}

void delay()  //延迟
{
	printf("\n 操作中，请稍后");
	Sleep(500);
	printf(".");
	Sleep(500);
	printf(".");
	Sleep(500);
	printf(".");
	Sleep(500);
	system("cls");
}
